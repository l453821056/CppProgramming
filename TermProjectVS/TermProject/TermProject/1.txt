#include "Storage.h"
#include <string>
#include <iostream>
using namespace std;
Selection CurrentSelect;
Time CurrentTime;
Storage Students;
string LessonType[4] = {"公必","专必","专选","公选"};
string DaysOfWeekName[7]={"Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"};
void throwError(int ErrorLevel, string ErrorProcedure,const char *argv)
{
            Error ErrorInstance;
            ErrorInstance.ErrorLevel=ErrorLevel;
            ErrorInstance.ErrorProcedure=ErrorProcedure;
            strcpy_s(ErrorInstance.ErrorArgv,MAX_COMMAND_CHAR,argv);
            throw ErrorInstance;
}
void throwError(int ErrorLevel, string ErrorProcedure,string ErrorMessage)
{
            Error ErrorInstance;
            ErrorInstance.ErrorLevel=ErrorLevel;
            ErrorInstance.ErrorProcedure=ErrorProcedure;
            ErrorInstance.ErrorMessage=ErrorMessage;
            memset(ErrorInstance.ErrorArgv,0,256);
            throw ErrorInstance;
}
void throwWarning(int ErrorLevel, string ErrorProcedure,const char *argv,string ErrorMessage)
{
    switch(ErrorLevel){
        case ACCESS_UNREASONABLE:{
            cout<<"Warning: Unreasonable Access During "<<RED<<ErrorProcedure<<RESET<<endl;
            break;
        }
        case INVAILD_INPUT:{
            cout<<"Warning: Invaild Input During "<<RED<<ErrorProcedure<<RESET<<endl;
            break;
        }
        default:
            break;
    }
    cout<<"During Processing Argument "<<RED<<argv<<RESET<<endl;    
    if(!ErrorMessage.empty())
        cout<<RED<<ErrorMessage<<RESET<<endl;
}
int MY_strcmp(const char* Command, const char* Input, bool EnableShort)
{
    if(EnableShort)
        return (strcmp(Input,Command)&&strcasecmp(Input,Command)&&!(Input[0]==Command[0]));
    else
        return (strcmp(Input,Command)&&strcasecmp(Input,Command));
}

char* strcpy_s(char *dest,size_t destsz, const char *src)
{
    size_t len=strlen(src);
    return len<=destsz?strcpy(dest,src):strcpy(dest,"");
}
int vaildStudentId(const char InputStudentId[])
{
    int StudentId=atoi(InputStudentId);
    if(StudentId<10000000 || StudentId>100000000)
        return 0;
//  if(!findStudentId(StudentId))
//      return 0;
    return StudentId;
}
    
int vaildTerm(const char InputTerm[])
{
    //To do
    int Term=atoi(InputTerm);
    if(Term<1||Term>MAX_TERM_OF_STUDENT)
        return 0;
    return Term;
}
int vaildYear(const char InputYear[])
{
    int Year=atoi(InputYear);
    if(Year<1924||Year>CurrentTime.getYear())
        return 0;
    return Year;
}
void help(initializer_list<string> argv)
{
    bool found=true;
    auto beg=argv.begin();
    if(argv.size()==1)
    {
        if(!MY_strcmp("select",(*beg).c_str())){
            cout<<"可用参数    "<<"用法"<<RESET<<endl;
			cout<<"student     "<<"后接学生学号，如"<<BOLDMAGENTA<<"select student 15323032"<<RESET<<RESET<<endl;
			cout<<"year        "<<"后接学年    ，如"<<BOLDMAGENTA<<"select year    2016"<<RESET<<RESET<<endl;
			cout<<"term        "<<"后接学期    ，如"<<BOLDMAGENTA<<"select term    1"<<RESET<<RESET<<endl;
            ++beg;
        }
        else{
            found=false;
        }
    }
    if(!found)
    {
    cout <<"没有找到"<<BOLDMAGENTA<<(*(argv.begin()))<<RESET<<"的帮助。";
    for(auto beg=argv.begin()+1;beg!=argv.end();++beg)
        cout <<"在模块"<<BOLDMAGENTA<<*beg<<RESET<<"中";
    cout <<endl;
    return;
    }
}
int select(int argc, char *argv[])
{
    if(argc<=2 || argc%2!=0){
        help({"select"});
    }
    int i=2;
    while(i<argc){
        if(!MY_strcmp("student",argv[i])){
            if(!(CurrentSelect.StudentId=vaildStudentId(argv[++i]))){
                throwError(INVAILD_INPUT,"Select Student",argv[i]);
                }
            cout <<"Successfully Selected Student "<<CYAN<<CurrentSelect.StudentId<<RESET<<", Now You Need To Select"<<BOLDMAGENTA<<" Year "<<RESET<<"and"<<BOLDMAGENTA<<" Term"<<RESET<<endl;   
            CurrentSelect.Selected=false;
        }
		else if (!MY_strcmp("rank", argv[i])) {
			int n = atoi(argv[++i]);
			if (n <= 0 || n > Students.getTotalStudentNumberRefer()) {
				throwError(INVAILD_INPUT, "Select Student", argv[i]);
			}
			if (!(CurrentSelect.StudentId = (Students.getStudentHandle(n-1)->getStudentId()))) {
				throwError(INVAILD_SELECTION, "Select Student", argv[i]);
			}
			cout << "Successfully Selected Student " << CYAN << CurrentSelect.StudentId << RESET << ", Now You Need To Select" << BOLDMAGENTA << " Year " << RESET << "and" << BOLDMAGENTA << " Term" << RESET << endl;
			CurrentSelect.Selected = false;
		}
        else if (!MY_strcmp("year",argv[i])){
            int result=CurrentSelect.CurrentYear=vaildYear(argv[++i]);
            if(!result){
                throwError(INVAILD_INPUT,"Select Year",argv[i]);
                }
            if(INVAILD_SELECTION==result){
                throwError(INVAILD_SELECTION,"Select Year",argv[i]);
                }
            cout <<"Successfully Selected Year "<<CYAN<<CurrentSelect.CurrentYear<<RESET<<", Now You Need To Select"<<BOLDMAGENTA<<" Term"<<RESET<<endl;   
        }
        else if(!MY_strcmp("term",argv[i])){
            int result=CurrentSelect.CurrentTerm=vaildTerm(argv[++i]);
            if(!result){
                throwError(INVAILD_INPUT,"Select Term",argv[i]);
                }
            if(INVAILD_SELECTION==result){
                throwError(INVAILD_SELECTION,"Select Term",argv[i]);
                }
            cout <<"Successfully Selected Term "<<CYAN<<CurrentSelect.CurrentTerm<<RESET<<endl;
            CurrentSelect.Selected=true;
        }
        else{
            throwError(INVAILD_INPUT,"Selection",argv[i]);
        }
        i++;
    }
    return 0;
}
int add(int argc, char *argv[])
{
    if(argc<=2){
        help({"add"});
    }
    int i=2;
    if(argc==3){
        if(!MY_strcmp("student",argv[i])){
            Students.Add();
        }
        else if(!MY_strcmp("lesson",argv[i])){
            if(CurrentSelect.Selected==false){
                throwError(NOT_HAVE_SELECTED,"add lesson",string("Now You Have Selected Student ")+string(to_string(CurrentSelect.StudentId))+string(" Year ")+string(to_string(CurrentSelect.CurrentYear))+string(" Term ")+string(to_string(CurrentSelect.CurrentTerm)));
            }
            Student* Point2Student=Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
            Term* Point2Term=Point2Student->getTermHandle(Point2Student->getNumberOfTerm(CurrentSelect.CurrentYear,CurrentSelect.CurrentTerm));
            Point2Term->Add();
        }
        else{
            throwError(INVAILD_INPUT,"Addition",argv[i]);
        }
    }
    return 0;
}
int del(int argc, char *argv[])
{
	if (argc <= 3) {
		help({ "delete" });
	}
	if (argc == 4) {
		if (!MY_strcmp("student", argv[2])) {
			int StudentId;
			if (!(StudentId = vaildStudentId(argv[3]))) {
				throwError(INVAILD_INPUT, "Delete Student", argv[3]);
			}
			Students.del(StudentId);
		}
		else if (!MY_strcmp("lesson", argv[2])) {
			if (CurrentSelect.Selected == false) {
				throwError(NOT_HAVE_SELECTED, "Delete Lesson", string("Now You Have Selected Student ") + string(to_string(CurrentSelect.StudentId)) + string(" Year ") + string(to_string(CurrentSelect.CurrentYear)) + string(" Term ") + string(to_string(CurrentSelect.CurrentTerm)));
			}
			Student* Point2Student = Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
			Term* Point2Term = Point2Student->getTermHandle(Point2Student->getNumberOfTerm(CurrentSelect.CurrentYear, CurrentSelect.CurrentTerm));
			int LessonRank = atoi(argv[3]);
			if (LessonRank > Point2Term->getNumberOfLessonRefer() || LessonRank <= 0)
				throwError(INVAILD_SELECTION, "Delete Lesson", argv[3]);
			Point2Term->del(LessonRank);
		}
		else if (!MY_strcmp("rank", argv[2])) {
			int n = atoi(argv[3]);
			int StudentId;
			if (n <= 0 || n > Students.getTotalStudentNumberRefer()) {
				throwError(INVAILD_INPUT, "Delete Student", argv[3]);
			}
			if (!(StudentId = (Students.getStudentHandle(n-1)->getStudentId()))) {
				throwError(INVAILD_SELECTION, "Delete Student", argv[3]);
			}
			Students.del(StudentId);
		}
		else {
			throwError(INVAILD_INPUT, "Deletion", argv[2]);
		}
	}

    return 0;
}
int find(int argc, char *argv[])
{
	if (argc <= 4) {
		help({ "find" });
	}
	if (argc == 5) {
		if (!MY_strcmp("student", argv[2])) {
			if (!MY_strcmp("-i",argv[3],false)) {
				int StudentId;
				if (!(StudentId = vaildStudentId(argv[4]))) {
					throwError(INVAILD_INPUT, "Find Student", argv[4]);
				}
				int Rank=Students.Find(StudentId);
				if (StudentId == NOT_FOUND_STUDENTID)
					throwError(NOT_FOUND_STUDENTID, "Find Student by ID", argv[4]);
				Students.print(Rank);
			}
			else if (!MY_strcmp("-n", argv[3], false)) {
				string Name = string(argv[4]);
				int Rank = Students.Find(Name);
				if (Rank == NOT_FOUND_STUDENTID)
					throwError(NOT_FOUND_STUDENTID, "Find Student by Name", argv[4]);
				Students.print(Rank);
			}
			else if(!MY_strcmp("-r",argv[3],false)) {
				int Rank = atoi(argv[4]);//Attention
				if (Rank <= 0 || Rank > Students.getTotalStudentNumberRefer()) {
					throwError(INVAILD_INPUT, "Find Student", argv[4]);
				}
				int From0Rank = Rank - 1;
				Students.print(From0Rank);
			}
			else {
				throwError(INVAILD_INPUT, "Find Student", string("No Matching Argv"));
			}
		}
		else if (!MY_strcmp("lesson", argv[2])) {
			if (!MY_strcmp("-w", argv[3], false)) {
				if (CurrentSelect.Selected == false) {
					throwError(NOT_HAVE_SELECTED, "Find Lesson", string("Now You Have Selected Student ") + string(to_string(CurrentSelect.StudentId)) + string(" Year ") + string(to_string(CurrentSelect.CurrentYear)) + string(" Term ") + string(to_string(CurrentSelect.CurrentTerm)));
				}
				Student* Point2Student = Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
				Term* Point2Term = Point2Student->getTermHandle(Point2Student->getNumberOfTerm(CurrentSelect.CurrentYear, CurrentSelect.CurrentTerm));
				int Week = atoi(argv[4]);//Attention
				vector<int> LessonRanks;
				for (int i = 0; i < Point2Term->getNumberOfLessonRefer(); i++) {
					LessonRanks.push_back(Point2Term->Find(Week, argv[3],i));
				}
				//大概没有一节课一天上两次吧
				for (auto j : LessonRanks) {
					if (LessonRanks[j] > Point2Term->getNumberOfLessonRefer() || LessonRanks[j] < 0)
						continue;
					Point2Term->print(LessonRanks[j]);
				}
			}
			else if (!MY_strcmp("-n", argv[3], false)) {
				if (CurrentSelect.Selected == false) {
					throwError(NOT_HAVE_SELECTED, "Find Lesson", string("Now You Have Selected Student ") + string(to_string(CurrentSelect.StudentId)) + string(" Year ") + string(to_string(CurrentSelect.CurrentYear)) + string(" Term ") + string(to_string(CurrentSelect.CurrentTerm)));
				}
				Student* Point2Student = Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
				Term* Point2Term = Point2Student->getTermHandle(Point2Student->getNumberOfTerm(CurrentSelect.CurrentYear, CurrentSelect.CurrentTerm));
				string LessonName = string(argv[4]);//Attention
				int LessonRank = Point2Term->Find(LessonName);
				Point2Term->print(LessonRank);
			}
			else if (!MY_strcmp("-t", argv[3], false)) {
				if (CurrentSelect.Selected == false) {
					throwError(NOT_HAVE_SELECTED, "Find Lesson", string("Now You Have Selected Student ") + string(to_string(CurrentSelect.StudentId)) + string(" Year ") + string(to_string(CurrentSelect.CurrentYear)) + string(" Term ") + string(to_string(CurrentSelect.CurrentTerm)));
				}
				Student* Point2Student = Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
				Term* Point2Term = Point2Student->getTermHandle(Point2Student->getNumberOfTerm(CurrentSelect.CurrentYear, CurrentSelect.CurrentTerm));
				int Type = atoi(argv[4]);//Attention
				vector<int> LessonRanks;
				for (int i = 0; i < Point2Term->getNumberOfLessonRefer(); i++) {
					LessonRanks.push_back(Point2Term->Find(Type, argv[3], i));
				}
				//大概没有一节课一天上两次吧
				for (auto j : LessonRanks) {
					if (LessonRanks[j] > Point2Term->getNumberOfLessonRefer() || LessonRanks[j] < 0)
						continue;
					Point2Term->print(LessonRanks[j]);
				}
			}
			else if (!MY_strcmp("-r", argv[3], false)) {
				if (CurrentSelect.Selected == false) {
					throwError(NOT_HAVE_SELECTED, "Find Lesson", string("Now You Have Selected Student ") + string(to_string(CurrentSelect.StudentId)) + string(" Year ") + string(to_string(CurrentSelect.CurrentYear)) + string(" Term ") + string(to_string(CurrentSelect.CurrentTerm)));
				}
				Student* Point2Student = Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
				Term* Point2Term = Point2Student->getTermHandle(Point2Student->getNumberOfTerm(CurrentSelect.CurrentYear, CurrentSelect.CurrentTerm));
				int LessonRank = atoi(argv[4]) - 1;//Attention
				if (LessonRank > Point2Term->getNumberOfLessonRefer() || LessonRank <= 0)
					throwError(INVAILD_SELECTION, "Find Lesson", argv[4]);
				Point2Term->print(LessonRank);
			}
			else {
				throwError(INVAILD_INPUT, "Find Lesson", string("No Matching Argv"));
			}
		}
		else if (!MY_strcmp("rank", argv[2])) {
			int n = atoi(argv[3]);
			int StudentId;
			if (n <= 0 || n > Students.getTotalStudentNumberRefer()) {
				throwError(INVAILD_INPUT, "Select Student", argv[3]);
			}
			if (!(StudentId = (Students.getStudentHandle(n - 1)->getStudentId()))) {
				throwError(INVAILD_SELECTION, "Select Student", argv[3]);
			}
			Students.Find(StudentId);
		}
		else {
			throwError(INVAILD_INPUT, "Deletion", argv[2]);
		}
	}
    return 0;
}
int sort(int argc, char *argv[])
{
    return 0;
}
int print(int argc, char *argv[])
{
    if(argc<=2){
        help({"print"});
    }
    int i=2;
    if(argc==3){
        if(!MY_strcmp("student",argv[i])){
            Students.print();
        }
        else if(!MY_strcmp("term",argv[i])){
            if(CurrentSelect.Selected==false){
                throwError(NOT_HAVE_SELECTED,"Print Term",string("Now You Have Selected Student ")+string(to_string(CurrentSelect.StudentId))+string(" Year ")+string(to_string(CurrentSelect.CurrentYear))+string(" Term ")+string(to_string(CurrentSelect.CurrentTerm)));
            }
            Student* Point2Student=Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
            Point2Student->print();
        }
        else if(!MY_strcmp("lesson",argv[i])){
            if(CurrentSelect.Selected==false){
                throwError(NOT_HAVE_SELECTED,"Print Lesson",string("Now You Have Selected Student ")+string(to_string(CurrentSelect.StudentId))+string(" Year ")+string(to_string(CurrentSelect.CurrentYear))+string(" Term ")+string(to_string(CurrentSelect.CurrentTerm)));
            }
            Student* Point2Student=Students.getStudentHandle(Students.Find(CurrentSelect.StudentId));
            Term* Point2Term=Point2Student->getTermHandle(Point2Student->getNumberOfTerm(CurrentSelect.CurrentYear,CurrentSelect.CurrentTerm));
            Point2Term->print();
        }
        else{
            throwError(INVAILD_INPUT,"Addition",argv[i]);
        }
    }
    return 0;
}
int promote()
{
    if(!CurrentSelect.Selected)
       cout << "NS > ";
    else 
       cout <<CurrentSelect.StudentId<<"@"<<CurrentSelect.CurrentYear<<"T"<<CurrentSelect.CurrentTerm<<" > "; 
    return 0;
}

int promote(string Content)
{
	cout << Content << " > ";
	return 0;
}
#include "Lesson.h"
string Lesson::GetTime(int StartTime)
{
    int Hour=8+((StartTime-1)*55)/60;
    int Min=(StartTime-1)*55%60;
    return (to_string(Hour)+":"+to_string(Min));
}
Lesson::Lesson(){
    Term=1;
    Name="NS";
    Type=0;
    for(int i=0;i<MAX_WEEK_TIMES;i++){
    Weekday[i]=0;
    StartTime[i]=1;
    EndTime[i]=1;
    }
    EndWeek=1;
    StartWeek=1;
    Finished=false;
    Credit=1;
    Grade=0;
    WeekTimes=0;
}
int Lesson::init()
{
    string Input;
    int Result;
	bool OK = false;
    cout<<"请输入课程名"<<endl;
	promote("Input Lesson Name");
    cin>>Input;
    Name=Input;
	cout << "请输入课程类型：" << endl;
	cout << BOLDMAGENTA << "1  " << RESET << "公必";
	cout << BOLDMAGENTA << "  2  " << RESET << "专必" << endl;
	cout << BOLDMAGENTA << "3  " << RESET << "专选";
	cout << BOLDMAGENTA << "  4  " << RESET << "公选" << endl; 
	while (!OK) {
		promote("Input Lesson Type");
		cin >> Input;
		if (Input[0] >= '1'&&Input[0] <= '4') {
			Type = (Input[0] - '0');
			OK = true;
		}
		else
			throwWarning(INVAILD_INPUT, "Add Lesson Type", Input.c_str());
	}
	OK = false;
    cout<<"请输入课程学分"<<endl;
	promote("Input Lesson Credit");
    cin >>Credit;
    cout<<"请输入每周上课次数"<<endl;
	promote("Input Week Times Num");
    int i;
	while (!OK) {
		cin>>i;
		if(i>MAX_WEEK_TIMES)
			throwWarning(INVAILD_INPUT,"Add Lesson Week Times",to_string(i).c_str());
		else {
			WeekTimes=i;
			OK = true;
		}
	}
   
    while(i)
    {
		OK = false;
        if(WeekTimes>1)
            cout<<"请输入每周第"<<WeekTimes-i+1<<"次课的时间信息"<<endl;
        cout<<"请输入周几上课（用数字"<<BOLDMAGENTA<<"1"<<RESET<<"到"<<BOLDMAGENTA<<"7"<<RESET<<"表示）"<<endl;
		while (!OK) {
			promote("Input");
		cin>>Input;
		if (Input[0] >= '1'&&Input[0] <= '7') {
            Weekday[i-1]=(Input[0]-'0');
			OK = true;
		}
        else
            throwWarning(INVAILD_INPUT,"Add Lesson Weekday",Input.c_str());
		}
        cout<<"请输入第几节上课"<<endl;
		promote("Input");
		OK = false;
		while (!OK) {
			cin>>Result;
			if (Result >= 1 && Result <= 15) {
				StartTime[i - 1] = Result;
				OK = true;
			}
			else
				throwWarning(INVAILD_INPUT, "Add Lesson StartTime", to_string(Result).c_str());
		}
        cout<<"请输入第几节下课"<<endl;
		promote("Input");
		OK = false;
		while (!OK) {
		cin>>Result;
		if (Result >= 1 && Result <= 15) {
			EndTime[i - 1] = Result;
			OK = true;
		}
        else
            throwWarning(INVAILD_INPUT,"Add Lesson EndTime",to_string(Result).c_str());
		}
		cout << "请输入上课地点" << endl;
		promote("Input");
		cin >> Place[i-1];
		i--;
    }
	OK = false;
 //   cout <<"请输入课程开始周数"<<endl;
	//while (!OK) {
	//promote("Input");
	//cin>>Result;
	//if (Result >= 1 && Result <= 20) {
 //       StartWeek=Result;
	//	OK = true;
	//}
 //   else
 //       throwWarning(INVAILD_INPUT,"Add Lesson StartWeek",to_string(Result).c_str());
	//}
 //   cout <<"请输入课程结束周数"<<endl;
	//OK = false;
	//while (!OK) {
	//	promote("Input");
	//	cin >> Result;
	//	if (Result >= 1 && Result <= 20) {
	//		EndWeek = Result;
	//		OK = true;
	//	}
	//	else
	//		throwWarning(INVAILD_INPUT, "Add Lesson EndWeek", to_string(Result).c_str());
	//}
	cout<<"请输入老师名字"<<endl;
	promote("Input");
    cin>>Input;
    TeacherName=Input;

    return 0;
    }

string Lesson::getGrade()
{
	if (this->Grade == 0)
		return string("暂无");
	else {
		return to_string(this->Grade);
	}
	return 0;
}
#include <iostream>
#include "Backend.h"
#include "main.h"
using namespace std;
int main(int argc, char *argv[])
{
    //Init Promote
    cout <<"Welcome to MUKS, a Multi-User Kechengbiao Software "<<endl;
    cout <<"Type "<<BOLDMAGENTA<<"help "<<RESET<<"for instructions on how to use MUKS"<<endl;
    promote();
    //Read Student Information Form File
/*  string Path="./";
    string FileNamePath="./data/";
    string StudentListFilePath="./data/list.txt"
    fstream StudentListFile(StudentListFilePath);
    while(!StudentListFile.eof()){
    string FileName;
    StudentListFile>>FileName;
*/  
    

    //Init Command stack
    char *iargv[MAX_COMMAND];
    for(int i=0;i<MAX_COMMAND;i++){
        iargv[i]=new char [MAX_COMMAND_CHAR];
        memset(iargv[i],0,sizeof(char)*MAX_COMMAND_CHAR);
    }
    for(int i=0;i<argc;i++)
        strcpy_s(iargv[i],MAX_COMMAND_CHAR,argv[i]);
    //read Command
    string Command;
    cin.sync_with_stdio(false);
    while(cin>>Command&&Command!="quit")
    {
        if(argc <= MAX_COMMAND){
            strcpy_s(iargv[argc],MAX_COMMAND_CHAR,Command.c_str());
            argc++;
        }
        if(cin.rdbuf()->in_avail()==1){
            if(argc != 1){
                try{
                if(!strcmp(iargv[1],"select"))
                    select(argc,iargv);
                else if(!strcmp(iargv[1],"add"))
                    add(argc,iargv);
                else if(!strcmp(iargv[1],"delete"))
                    del(argc,iargv);
                else if(!strcmp(iargv[1],"sort"))
                    sort(argc,iargv);
                else if(!strcmp(iargv[1],"find"))
                    find(argc,iargv);
                else if(!strcmp(iargv[1],"print"))
                    print(argc,iargv);
                else
                    cout<<"Wrong Input, enter"<<BOLDMAGENTA<<" help"<<RESET<<" to see manual"<<endl;
                }catch(Error ErrorInstance){
                    switch(ErrorInstance.ErrorLevel){
                        case INVAILD_INPUT:{
                            cout<<RED<<"Error: Invaild Input During "<<RED<<ErrorInstance.ErrorProcedure<<RESET<<endl;
                            break;
                        }
                        case INVAILD_SELECTION:{
                            cout<<RED<<"Error: Invaild Selection During "<<RED<<ErrorInstance.ErrorProcedure<<RESET<<endl;
                            break;
                        }
                        case NOT_HAVE_SELECTED:{
                            cout<<RED<<"Error: Invaild Selection During "<<RED<<ErrorInstance.ErrorProcedure<<RESET<<endl;
                            break;
                        }
                        case ACCESS_VIOLATION:{
                            cout<<RED<<"Error: Invaild Access During "<<RED<<ErrorInstance.ErrorProcedure<<RESET<<endl;
                            break;
                        }
                        case STORAGE_FULL:{
                            cout<<RED<<"Error: Storage is Full "<<RED<<ErrorInstance.ErrorProcedure<<RESET<<endl;
                            break;
                        }
                        default:
                            break;
                    }
                    cout<<"During Processing Argument "<<RED<<ErrorInstance.ErrorArgv<<RESET<<endl;    
                    if(!ErrorInstance.ErrorMessage.empty())
                        cout<<RED<<ErrorInstance.ErrorMessage<<RESET<<endl;
                }
                argc=1;//Clear Used Command
            }
            promote();
        }
    }
    return 0;
}
#include "Storage.h"
int& Storage::getTotalStudentNumberRefer()
{
    return TotalStudentNumber;
}
Storage::Storage()
{
    getTotalStudentNumberRefer()=0;
}
const Student& Storage::getStudent(int n)
{
    char argv[MAX_COMMAND_CHAR];
    sprintf(argv,"%d",n);
    if(n>getTotalStudentNumberRefer())
        throwError(ACCESS_VIOLATION,"Read Students",argv);
    return Students[n];
}
const Student& Storage::operator [](int n)
{
    char argv[MAX_COMMAND_CHAR];
    sprintf(argv,"%d",n);
    if(n>getTotalStudentNumberRefer())
        throwError(ACCESS_VIOLATION,"Read Students",argv);
    return Students[n];
}
Student* Storage::getStudentHandle(int n)
{
    char argv[MAX_COMMAND_CHAR];
    sprintf(argv,"%d",n);
	if(n>getTotalStudentNumberRefer())
        throwError(ACCESS_VIOLATION,"Read Students",argv);
    return &Students[n];
}
Student* Storage::newStudentHandle(int n)
{
	char argv[MAX_COMMAND_CHAR];
	sprintf(argv, "%d", n);
	if (n == getTotalStudentNumberRefer()) {
		if (n == MAX_STUDENTS_NUM)
			throwError(STORAGE_FULL, "Write Students", argv);
		Student temp;
		Students.push_back(temp);
	}
	else if (n>getTotalStudentNumberRefer())
		throwError(ACCESS_VIOLATION, "Write Students", argv);
	return &Students[n];
}
int Storage::Add()
{
    bool OK=false;
    if(getTotalStudentNumberRefer()==MAX_STUDENTS_NUM)
        throwError(STORAGE_FULL,"Add Student",string("You can not storage more student"));
    string Input;
	cout <<"请输入学号"<<endl;
    while(!OK){
		promote("Input Student ID");
	    cin>>Input;
	    int result=vaildStudentId(Input.c_str());
	    if(!result){
	        throwWarning(INVAILD_INPUT,"add student",Input.c_str(),"Illegal Student ID");
	        }
	    else{
	        this->newStudentHandle(getTotalStudentNumberRefer())->setStudentId(result);
	        OK=true;
	    }
    }
    OK=false;
    cout <<"请输入姓名"<<endl;
	promote("Input Student Name");
    cin>>Input;
    this->getStudentHandle(getTotalStudentNumberRefer())->setName(Input);
/*	cout <<"请输入学院"<<endl;
    while(!OK){
		promote("Input School Name");
        cin >>Input;
        if(Input.size()>MAX_LENGTH_OF_SCHOOL){
            throwWarning(INVAILD_INPUT,"Set School Name",Input.c_str(),"Please Input a Shorter School Name");
            continue;
        }
        else{
            OK=true;
            this->getStudentHandle(getTotalStudentNumberRefer())->setSchool(Input);
        }
    }
    OK=false;
    cout <<"请输入专业"<<endl;
    while(!OK){
		promote("Input Major Name");
        cin >>Input;
        if(Input.size()>MAX_LENGTH_OF_MAJOR){
            throwWarning(INVAILD_INPUT,"Set Major Name",Input.c_str(),"Please Input a Shorter Major Name");
            continue;
        }
        else{
            OK=true;
            this->getStudentHandle(getTotalStudentNumberRefer())->setMajor(Input);
        }
    }
	*/
    getTotalStudentNumberRefer()++;
}
int Storage::Find(int StudentId, const char* Mode, int LastSearch)
{
	if (!strcasecmp(Mode,"-i")) {
		bool found = false;
		for (int i = LastSearch; i<getTotalStudentNumberRefer(); i++) {
			if (this->getStudentHandle(i)->getStudentId() == StudentId) {
				found = true;
				return i;
			}
		}
		if (!found)
			return NOT_FOUND_STUDENTID;
	}
	else{
		return 0;
	}
}
int Storage::Find(string Name, const char* Mode, int LastSearch)
{
	if (!strcasecmp(Mode,"-n")) {
		bool found = false;
		for (int i = LastSearch; i<getTotalStudentNumberRefer(); i++) {
			if (this->getStudentHandle(i)->getName() == Name) {
				found = true;
				return i;
			}
		}
		if (!found)
			return NOT_FOUND_STUDENTID;
	}
	else {
		return 0;
	}
}
int Storage::print()
{
    cout <<CYAN<<"  序号"<<"  姓名    "<<"  学号    "<<"  学院                  "<<"  专业                "<<RESET<<endl;
//  cout <<CYAN<<"  256 "<<"  木子雨辰"<<"  15323032"<<"  政治与公共事务管理学院"<<"  图书情报与档案管理类"
          cout <<"  ----"<<"  --------"<<"  --------"<<"  ----------------------"<<"  --------------------"<<endl;
    for(int i=0;i<getTotalStudentNumberRefer();i++)
    {
        cout<<left<<setfill(' ')<< "  "<<setw(4)<<i+1<<setw(2)<<"  "<<setw(8)<<Students[i].getName()<< setw(4) << "    " << setw(8)<<Students[i].getStudentId()<< setw(2) << "  " << setw(22)<<Students[i].getSchool()<< setw(2) << "  " << setw(20)<<Students[i].getMajor()<<endl;
    }
    return 0;
}
int Storage::print(int Rank)
{
	cout << CYAN << "  序号" << "  姓名    " << "  学号    " << "  学院                  " << "  专业                " << RESET << endl;
	//  cout <<CYAN<<"  256 "<<"  木子雨辰"<<"  15323032"<<"  政治与公共事务管理学院"<<"  图书情报与档案管理类"
	cout << "  ----" << "  --------" << "  --------" << "  ----------------------" << "  --------------------" << endl;
	cout << left << setfill(' ') << "  " << setw(4) << Rank + 1 << setw(2) << "  " << setw(8) << Students[Rank].getName() << setw(4) << "    " << setw(8) << Students[Rank].getStudentId() << setw(2) << "  " << setw(22) << Students[Rank].getSchool() << setw(2) << "  " << setw(20) << Students[Rank].getMajor() << endl;
	return 0;
}
int Storage::del(int StudentId) {
	int n = Find(StudentId);
	if (StudentId == CurrentSelect.StudentId)
		CurrentSelect.Selected = false;
	vector<Student>::iterator it = Students.begin() + n;
	Students.erase(it);
	getTotalStudentNumberRefer()--;
	return 0;
}
#include "Student.h"
void Student::calcTermTillNow()
{
 Time CurrentTime;
 this->NumberOfTerm= getNumberOfTerm(CurrentTime.getYear(),(CurrentTime.getMonth()<9&&CurrentTime.getMonth()>=3)?2:1); 
}
int Student::getOverallCredit()
{
    reNewStudentContentAfterTermsChanged();
    return OverallCredit;
}
int Student::getOverallGrade()
{
    reNewStudentContentAfterTermsChanged();
    return OverallGrade;
}
int Student::getOverallGradeExpectPubEle()
{
    reNewStudentContentAfterTermsChanged();
    return OverallGradeExpectPubEle;
}
int Student::getOverallCreditExpectPubEle()
{
    reNewStudentContentAfterTermsChanged();
    return OverallCreditExpectPubEle;
}
Student::Student(){
    Name="N/S";
    StudentId=-1;
    EntranceYear=1924;
    OverallGrade=-1;
    OverallCredit=0;
    TermsChanged=false;
    NumberOfTerm=0;
}
const Term& Student::getTerm(int n)
{
    char argv[MAX_COMMAND_CHAR];
    sprintf(argv,"%d",n);
    if(n>MAX_TERM_OF_STUDENT)
        throwError(ACCESS_VIOLATION,"Read Terms",argv);
    return Terms[n];
}
const Term& Student::operator [](int n)
{
    char argv[MAX_COMMAND_CHAR];
    sprintf(argv,"%d",n);
    if(n>MAX_TERM_OF_STUDENT)
        throwError(ACCESS_VIOLATION,"Read Terms",argv);
    return Terms[n];
}
void Student::calcEntranceYear()
{
    EntranceYear=2000+StudentId/1000000;
}
int Student::getNumberOfTerm(int Year, int Term)
{
    Time CurrentTime;
    char argv[MAX_COMMAND_CHAR];
    sprintf(argv,"%d",Year);
    argv[4]=',';
    sprintf(argv,"%d",Term);
    if(Year>CurrentTime.getYear())
        throwWarning(ACCESS_UNREASONABLE,"Read Terms",argv);
    int Part1=(Year-EntranceYear)*3+Term;
    int Part2=(EntranceYear<=2015?(2015-EntranceYear+1):0);                              
    int Part3=((Year-(EntranceYear<=2015?2016:EntranceYear))*2+Term);
    return (Year<=2015?Part1:(Part2*3+Part3));/*
    return (((Year<=2015?((Year-EntranceYear)*3+Term):
(((EntranceYear<=2015?(2015-EntranceYear+1):0)*3+
\(Year-(EntranceYear<=2015?2016:EntranceYear)*2+Term))); 
*/
}
Term* Student::getTermHandle(int n)
{
    char argv[MAX_COMMAND_CHAR];
    sprintf(argv,"%d",n);
    if(n>MAX_TERM_OF_STUDENT)
        throwError(ACCESS_VIOLATION,"Write Terms",argv);
    return &Terms[n];
}
int Student::setName(string Name)
{
    this->Name=Name;
    return 0;
}
int Student::getTotalTermOfYear(int Year)
{
    return Year<=2015?3:2;
}
int Student::setStudentId(int StudentId)
{
    Time CurrentTime;
    this->StudentId=StudentId;
    this->calcEntranceYear();
    this->calcTermTillNow();
    for(int i=EntranceYear;i<=CurrentTime.getYear();i++)
    {
        for(int j=1;j<=getTotalTermOfYear(i);j++)
        {
        int TotalRank=getNumberOfTerm(i,j);
		this->getTermHandle(TotalRank)->TermRankOfLastTerm = getNumberOfTerm(CurrentTime.getYear(), (CurrentTime.getMonth() >= 3 || CurrentTime.getMonth() < 9 ? 2 : 1));
        this->getTermHandle(TotalRank)->setYear(i);
        this->getTermHandle(TotalRank)->setTotalRank(TotalRank);
        this->getTermHandle(TotalRank)->setRank(j);
        }
    }
    return 0;
}
string Student::getName()
{
    return this->Name;
}
int Student::getStudentId()
{
    return this->StudentId;
}
void Student::reNewStudentContentAfterTermsChanged()
{
    if(TermsChanged)
    {
        int SumOfCredit=0;
        int SumOfGrade=0;
        int SumOfCreditExpectPubEle=0;
        int SumOfGradeExpectPubEle=0;
        for(int i=0;i<NumberOfTerm;i++)
        {
            SumOfCredit+=Terms[i].getCredit();
            SumOfGrade+=Terms[i].getCredit()*Terms[i].getAverage();
            SumOfCreditExpectPubEle=Terms[i].getCreditExpectPubEle();
            SumOfGradeExpectPubEle+=Terms[i].getCreditExpectPubEle()*Terms[i].getAverageExpectPubEle();
        }
        this->OverallCredit=SumOfCredit;
        this->OverallGrade=SumOfGrade/SumOfCredit;
        this->OverallCreditExpectPubEle=SumOfCreditExpectPubEle;
        this->OverallGradeExpectPubEle=SumOfGradeExpectPubEle/SumOfCreditExpectPubEle;
        this->TermsChanged=false;
    }
}
string Student::getSchool()
{
    return this->School;
}
string Student::getMajor()
{
    return this->Major;
}
int Student::setSchool(string School)
{
    this->School=School;
    return 0;
}
int Student::setMajor(string Major)
{
    bool OK=false;
    while(!OK)
    {
        if(School.size()>MAX_LENGTH_OF_MAJOR)
        {
            throwWarning(INVAILD_INPUT,"Set Major Name",Major.c_str(),"Please Input a Shorter Major Name");
            cin>>Major;
            continue;
        }
        else
            OK=true;
        this->Major=Major;
    }
    return 0;
}

int Student::print()
{
    cout <<CYAN<<"  序号"<<"  学年     "<<"  学期"<<"  已选课程"<<"  学分"<<"  平均绩点"<<"  公选外绩点"<<RESET<<endl;
//  cout <<CYAN<<"  256 "<<"  2015-2016"<<"  1   "<<"  11门    "<<"  27  "<<"  4.35    "<<"  4.55      "
          cout <<"  ----"<<"  ---------"<<"  ----"<<"  --------"<<"  ----"<<"  --------" << "  ----------" <<endl;
    Time CurrentTime;
    for(int i=EntranceYear;i<=CurrentTime.getYear();i++)
    {
        for(int j=1;j<=getTotalTermOfYear(i);j++)
        {
        int TotalRank=getNumberOfTerm(i,j);
        cout<<setfill(' ') << "  " <<setw(4)<<TotalRank << "  " <<i<<"-"<<i+1<<setw(6)<<j<<setw(10)<<Terms[TotalRank].getNumberOfLessonRefer();
        cout<<"  "<<setw(4)<<Terms[TotalRank].getCredit()<<setw(10)<<Terms[TotalRank].getAverage()<<setw(12)<<Terms[TotalRank].getAverageExpectPubEle()<<RESET<<endl;
        }
    }
    return 0;
}

#include "Term.h"
Term::Term(){
    NumberOfLesson=0;
    Year=1924;
    Rank=1;
    TotalRank=0;
    TotalCredit=0;
    Average=0;
    AverageExpectPubEle=0;
    LessonsChanged=false;
    TotalCreditExpectPubEle=0;
	for (int i = 0; i <= MAX_LESSON_OF_TERM; i++) {
		Lesson temp;
		Lessons.push_back(temp);
	}
}
int Term::setYear(int Year)
{
    this->Year=Year;
    for(int i=1;i<=MAX_LESSON_OF_TERM;i++)
        Lessons[i].Year=Year;
    return 0;
}
int Term::setRank(int Rank)
{
    this->Rank=Rank;
    for(int i=1;i<=MAX_LESSON_OF_TERM;i++)
        Lessons[i].Term=Rank;
    return 0;
}
int Term::setTotalRank(int TotalRank)
{
    this->TotalRank=TotalRank;
    return 0;
}

void Term::reNew()
{
    if(LessonsChanged)
    {
        int SumOfCredit=0;
        int SumOfGrade=0;
        int SumOfCreditExpectPubEle=0;
        int SumOfGradeExpectPubEle=0;
        for(int i=0;i<NumberOfLesson;i++)
        {
            SumOfCredit+=Lessons[i].Credit;
            SumOfGrade+=Lessons[i].Credit*Lessons[i].Grade;
            SumOfCreditExpectPubEle+=(Lessons[i].Type==3?0:Lessons[i].Credit);
            SumOfGradeExpectPubEle+=(Lessons[i].Type==3?0:Lessons[i].Credit*Lessons[i].Grade);
        }
        this->TotalCredit=SumOfCredit;
        this->TotalCreditExpectPubEle=SumOfCreditExpectPubEle;
        this->Average=SumOfGrade/SumOfCredit;
        this->AverageExpectPubEle=SumOfGradeExpectPubEle/SumOfCreditExpectPubEle;
        this->LessonsChanged=false;
    }
}
int Term::getCredit()
{
    reNew();
    return TotalCredit;
}
int Term::getCreditExpectPubEle()
{
    reNew();
    return TotalCreditExpectPubEle;
}
int Term::getAverage()
{
   reNew();
   return Average;
}
int Term::getAverageExpectPubEle()
{
   reNew();
   return AverageExpectPubEle;
}
int& Term::getNumberOfLessonRefer()
{
    return NumberOfLesson;
}
Lesson* Term::getLessonHandle(int n)
{
	char argv[MAX_COMMAND_CHAR];
	sprintf(argv, "%d", n);
	if (n>getNumberOfLessonRefer())
		throwError(ACCESS_VIOLATION, "Read Lessons", argv);
	return &Lessons[n];
}
//Lesson* Term::newLessonHandle(int n)
//{
//	char argv[MAX_COMMAND_CHAR];
//	sprintf(argv, "%d", n);
//	if (n == getNumberOfLessonRefer()) {
//		if (n == MAX_STUDENTS_NUM)
//			throwError(STORAGE_FULL, "Write Lessons", argv);
//		Lesson temp;
//		Lessons.push_back(temp);
//	}
//	else if (n>getNumberOfLessonRefer())
//		throwError(ACCESS_VIOLATION, "Write Lessons", argv);
//	return &Lessons[n];
//}

int Term::Add()
{
	if (NumberOfLesson == MAX_LESSON_OF_TERM)
		throwError(STORAGE_FULL, "Add Lesson", string("You CANNOT Storage More Lesson in This Term"));
	else {
		Lesson* Point2Lesson=this->getLessonHandle(getNumberOfLessonRefer());
		Point2Lesson->Finished = true;
		Point2Lesson->init();
		getNumberOfLessonRefer()++;
	}
}
int Term::print()
{
	cout << CYAN << "  序号" << "  课程名           " << "  类型" << "  学分" << "    老师" << "  成绩" <<RESET<<endl;
        // cout  << "     " << "  英语学术阅读与写作I" << "  公必" << "  1   " << "12345678"<< "  暂无" <<  
	for (int i = 0; i < NumberOfLesson; i++) {
		cout << setfill(' ') <<"  "<< setw(4) << i+1 <<left <<"  " << setw(22) << Lessons[i].Name << "  " << setw(4) << LessonType[Lessons[i].Type-1] << "  " << setw(4) << Lessons[i].Credit << "  " << setw(8) << Lessons[i].TeacherName << "  " << Lessons[i].getGrade() << endl;
		for (int j = 0; j < Lessons[i].WeekTimes; j ++) {
			cout << CYAN << "  上课时间" << j + 1 << "：" << RESET << Lessons[i].GetTime(Lessons[i].StartTime[j]) << CYAN << "  地点：" << Lessons[i].Place[j] << RESET << endl;
		}
	}
    return 0;
}
int Term::print(int Rank)
{
	cout << CYAN << "  序号" << "  课程名           " << "  类型" << "  学分" << "    老师" << "  成绩" << RESET << endl;
	// cout  << "     " << "  英语学术阅读与写作I" << "  公必" << "  1   " << "12345678"<< "  暂无" <<  
		cout << setfill(' ') << "  " << setw(4) << Rank + 1 << left << "  " << setw(22) << Lessons[Rank].Name << "  " << setw(4) << LessonType[Lessons[Rank].Type - 1] << "  " << setw(4) << Lessons[Rank].Credit << "  " << setw(8) << Lessons[Rank].TeacherName << "  " << Lessons[Rank].getGrade() << endl;
		for (int j = 0; j < Lessons[Rank].WeekTimes; j++) {
			cout << CYAN << "  上课时间" << j + 1 << "：" << RESET << Lessons[Rank].GetTime(Lessons[Rank].StartTime[j]) << CYAN << "  地点：" << Lessons[Rank].Place[j] << RESET << endl;
	}
	return 0;
}
int Term::del(int n)
{
	vector<Lesson>::iterator it = Lessons.begin() + n;
	Lessons.erase(it);
	Lesson temp;
	Lessons.push_back(temp);
	getNumberOfLessonRefer()--;
	return 0;
}
int Term::Find(int Rank, const char* Mode, int LastSearch)
{
	if (!strcasecmp(Mode,"-r")) {
		//bool found = false;
		//for (int i = 0; i<getNumberOfLessonRefer(); i++) {
		//	if (this->getLessonHandle(i)-> == StudentId) {
		//		found = true;
		//		return i;
		//	}
		//}
		//if (!found)
		//	return NOT_FOUND_STUDENTID;
		return Rank;
	}
	else if (!strcasecmp(Mode,"-w")) {
		bool found = false;
		for (int i = LastSearch; i<getNumberOfLessonRefer(); i++) {
			for (int j = 0; j < this->getLessonHandle(i)->WeekTimes; j++) {
				if (this->getLessonHandle(i)->Weekday[j] == Rank) {
					found = true;
					return i;
				}
			}
		}
		if (!found)
			return NOT_FOUND_LESSON;
	}
	else if (!strcasecmp(Mode,"-t")) {
		bool found = false;
		for (int i = LastSearch; i<getNumberOfLessonRefer(); i++) {
			if (this->getLessonHandle(i)->Type == Rank) {
				found = true;
				return i;
			}
		}
		if (!found)
			return NOT_FOUND_LESSON;
	}

	else {
		return 0;
	}
}
int Term::Find(string Name, const char* Mode, int LastSearch)
{
	if (!strcasecmp(Mode,"-r")) {
		//bool found = false;
		//for (int i = 0; i<getNumberOfLessonRefer(); i++) {
		//	if (this->getLessonHandle(i)-> == StudentId) {
		//		found = true;
		//		return i;
		//	}
		//}
		//if (!found)
		//	return NOT_FOUND_STUDENTID;
		return Rank;
	}
	else if(!strcasecmp(Mode,"-n")) {
		bool found = false;
		for (int i = LastSearch; i<getNumberOfLessonRefer(); i++) {
			if (this->getLessonHandle(i)->Name == Name) {
				found = true;
				return i;
			}
		}
		if (!found)
			return NOT_FOUND_LESSON;
	}
	else {
		return 0;
	}
}
